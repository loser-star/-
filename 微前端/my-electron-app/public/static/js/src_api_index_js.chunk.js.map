{"version":3,"file":"static/js/src_api_index_js.chunk.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AAEA;AAAA;AAAA;AAgBA;AAAA;AAXA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACDA;;AAEA;AACA;AAAA;AAAA;;AAOA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;;AAIA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;;AAIA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;;AAQA;AAAA;AAAA;AARA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAEA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;ACjCA;AAEA;AAAA;AAAA;AAGA;AAAA;AAHA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;ACbsources":["G:/github/my/微前端/meeting_room_booking_system_frontend_user/src/api/home.js","G:/github/my/微前端/meeting_room_booking_system_frontend_user/src/api/index.js","G:/github/my/微前端/meeting_room_booking_system_frontend_user/src/api/login.js","G:/github/my/微前端/meeting_room_booking_system_frontend_user/src/api/user.js","G:/github/my/微前端/meeting_room_booking_system_frontend_user/src/services/index.js"],"sourcesContent":["import axiosInstance from \"../services\";\r\n\r\nexport async function searchMeetingRoomList(\r\n  name,\r\n  capacity,\r\n  equipment,\r\n  pageNo,\r\n  pageSize\r\n) {\r\n  return await axiosInstance.get(\"/meeting-room/list\", {\r\n    params: {\r\n      name,\r\n      capacity,\r\n      equipment,\r\n      pageNo,\r\n      pageSize,\r\n    },\r\n  });\r\n}\r\n","export * from \"./login\";\r\nexport * from \"./user\";\r\nexport * from \"./home\";\r\n","import axiosInstance from \"../services\";\r\n\r\n// 登录\r\nexport async function login(username, password) {\r\n  return await axiosInstance.post(\"/user/login\", {\r\n    username,\r\n    password,\r\n  });\r\n}\r\n\r\n// 发送注册验证码\r\nexport async function sendRegisterCaptcha(email) {\r\n  return await axiosInstance.get(`/user/register-captcha?address=${email}`);\r\n}\r\n\r\n// 注册\r\nexport async function register(registerUser) {\r\n  return await axiosInstance.post(\"/user/register\", registerUser);\r\n}\r\n\r\n// 发送重置密码验证码\r\n\r\nexport async function updatePasswordCaptcha(email) {\r\n  return await axiosInstance.get(\"/user/update_password/captcha\", {\r\n    params: {\r\n      address: email,\r\n    },\r\n  });\r\n}\r\n\r\n// 重置密码\r\nexport async function updatePassword(data) {\r\n  return await axiosInstance.post(\"/user/update_password\", data);\r\n}\r\n","import axiosInstance from \"../services\";\r\n\r\nexport async function getUserInfo() {\r\n  console.log(\"getUserInfo\");\r\n  return await axiosInstance.get(\"/user/info\");\r\n}\r\n\r\nexport async function updateInfo(data) {\r\n  return await axiosInstance.post(\"/user/update\", data);\r\n}\r\n\r\nexport async function updateUserInfoCaptcha() {\r\n  return await axiosInstance.get(\"/user/update/captcha\");\r\n}\r\n","// import hyRequest from \"./request/index\";\r\n\r\n// export default hyRequest;\r\n\r\nimport axios from \"axios\";\r\nimport { message } from \"antd\";\r\nconst axiosInstance = axios.create({\r\n  baseURL: \"http://127.0.0.1:4000\",\r\n  timeout: 3000,\r\n});\r\n\r\n// Add a request interceptor\r\naxiosInstance.interceptors.request.use(\r\n  (config) => {\r\n    if (config.url === \"/login\") {\r\n      return config;\r\n    }\r\n    // console.log(\"请求拦截\");\r\n\r\n    // 设置Authorization\r\n\r\n    const accessToken = localStorage.getItem(\"access_token\");\r\n\r\n    if (accessToken) {\r\n      config.headers.authorization = \"Bearer \" + accessToken;\r\n    }\r\n\r\n    return config;\r\n  },\r\n  (error) => {\r\n    // Do something with request error\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nlet refreshing = false;\r\nconst queue = [];\r\n\r\naxiosInstance.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  async (error) => {\r\n    let { data, config } = error.response;\r\n    console.log(data, config);\r\n    if (refreshing) {\r\n      return new Promise((resolve) => {\r\n        queue.push({\r\n          config,\r\n          resolve,\r\n        });\r\n      });\r\n    }\r\n\r\n    if (data.code === 401 && !config.url.includes(\"/user/refresh\")) {\r\n      refreshing = true;\r\nconsole.log(\"refreshing\" + refreshing);\r\n      const res = await refreshToken();\r\n      refreshing = false;\r\n      if (res.status === 200) {\r\n        queue.forEach(({ config, resolve }) => {\r\n          resolve(axiosInstance(config));\r\n        });\r\n\r\n        return axiosInstance(config);\r\n      } else {\r\n        message.error(res.data);\r\n\r\n        setTimeout(() => {\r\n          window.location.href = \"/login\";\r\n        }, 1500);\r\n      }\r\n    } else {\r\n      return error.response;\r\n    }\r\n  }\r\n);\r\n\r\nasync function refreshToken() {\r\n  const res = await axiosInstance.get(\"/user/refresh\", {\r\n    params: {\r\n      refreshToken: localStorage.getItem(\"refresh_token\"),\r\n    },\r\n  });\r\n  console.log(\"res\" + res);\r\n  localStorage.setItem(\"access_token\", res.data.access_token || \"\");\r\n  localStorage.setItem(\"refresh_token\", res.data.refresh_token || \"\");\r\n  return res;\r\n}\r\n\r\nexport default axiosInstance;\r\n"],"names":[],"sourceRoot":""}